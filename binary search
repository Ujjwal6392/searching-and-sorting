//***binary search****//
#include <iostream>
#include<algorithm>
#include<vector>
using namespace std;

int binarySearch(int arr[], int size, int target) {
  int start = 0;
  int end = size - 1;

  int mid = start + (end - start ) / 2;

  while(start <= end) {
    int element = arr[mid];

    if(element == target) {//element found, then return index
      return mid;
    }
    
    if(target < element) {
      //search in left
      end = mid - 1;
    }
    else {
      //search in right
      start = mid + 1;
    }

    mid = start + (end - start ) / 2;

  }

  //element not found
  return -1;

}

int main() {
  // int arr[] = {2,4,6,8,10,12,16};
  // int size = 7;
  // int target = 20;

  // int indexOftarget = binarySearch(arr, size, target);

  // if(indexOftarget == -1) {
  //   cout << "target not found" << endl;
  // }
  // else  {
  //   cout << "target found at " << indexOftarget <<" index " << endl;
  // }

  vector<int> v{1,2,3,4,5,6};
  int arr[] = {1,2,3,4,5,6,7 };
  int size = 7;

  if(binary_search(arr, arr + size, 7)) {
    cout << "Found" << endl;
  }
  else {
    cout << "Not found. " << endl;
  }


  return 0;
}

// Online C++ compiler to run C++ program online
#include <iostream>
#include<vector>
#include<algorithm>
using namespace std;

// int firstoccurence(vector<int>v,int target)
// {
//     int s=0;
//     int e=v.size()-1;
//     int mid=(s+((e-s)/2));
//     int ans=-1;
//     while(s<=e)
//     {
//         if(v[mid]==target)
//         {
//             ans=mid;
//             e=mid-1;
//         }
//         else if(target>v[mid])
//         {
//             s=mid+1;
//         }
//         else if(target<v[mid])
//         {
//             e=mid-1;
//         }
//          mid=(s+((e-s)/2));
//     }
//     return ans;
// }

// int main() {
//     vector<int>v{1,3,3,3,3,3,4,4,4,4,4,4};
//     int target=4;
//     int indexoffirstocc=firstoccurence(v,target);
//     cout<<"ans is "<<indexoffirstocc <<endl;
//     return 0;
// }
//  
// int main()
// {
    //******predefined function for first and last occurence******//
//     vector<int>v{1,3,3,3,3,4,4,4,4,4,4,6,7};
//     int target=4;
//     auto ans1 =lower_bound(v.begin(),v.end(),target);
//     cout<<"ans1 is "<<ans1-v.begin()<<endl;
//     auto ans2=upper_bound(v.begin(),v.end(),target);
//     cout<<"ans2 is "<<ans2-v.begin()<<endl;
// }


//************for total no. of occurence of a number****///////
// int main()
// {
    
//     vector<int>v{1,3,3,3,3,4,4,4,4,4,4,6,7};
//     int target=4;
//     auto firstoccurence =lower_bound(v.begin(),v.end(),target);
//     cout<<"ans1 is "<<firstoccurence-v.begin()<<endl;
//     auto lastoccurence=upper_bound(v.begin(),v.end(),target);
//     cout<<"ans2 is "<<lastoccurence-v.begin()<<endl;
//     int totaloccurence=(lastoccurence-firstoccurence);
//     cout<<"total no. of occurence is "<<totaloccurence<<endl;
// }
// int pv(vector<int>v)
// {
//     int s=0;
//     int e=v.size()-1;
//     int mid=(s+((e-s)/2));
//     int peak=0;
//     while(s<e)
//     {
//         if(v[mid]<v[mid+1])
//         {
//             s=mid+1;
//         }
//         else
//         {
//             e=mid;
//         }
//         mid=(s+((e-s)/2));
//     }
//     return s;
// }
// int main()
// {
//     vector<int>v{0,10,5,2};
//     int peakvalue=pv(v);
//     cout<<"peak value is "<<peakvalue<<endl;
// }
